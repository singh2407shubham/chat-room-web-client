{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamsingh/Projects/WebChat/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT, {\n      withCredentials: false,\n      transportOptions: {\n        polling: {\n          extraHeaders: {\n            \"my-custom-header\": \"abcd\"\n          }\n        }\n      }\n    });\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]); //useEffect when values change for only once\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]); // fn for sending messages\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerConatainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conatiner\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessages(e.target.value),\n        onKeyPress: e => e.key === 'Enter' ? sendMessage(e) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"M7DGl/NqV6luCY8IpJPKHYFo+ZU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/shubhamsingh/Projects/WebChat/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","withCredentials","transportOptions","polling","extraHeaders","emit","off","on","e","target","value","key","sendMessage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMe,QAAQ,GAAG,gBAAjB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACM,MAAAA,IAAD;AAAME,MAAAA;AAAN,QAAcP,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAApB;AAEAb,IAAAA,MAAM,GAAGD,EAAE,CAACY,QAAD,EAAU;AACjBG,MAAAA,eAAe,EAAE,KADA;AAEjBC,MAAAA,gBAAgB,EAAE;AACdC,QAAAA,OAAO,EAAE;AACLC,UAAAA,YAAY,EAAE;AACV,gCAAoB;AADV;AADT;AADK;AAFD,KAAV,CAAX;AAYAb,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACkB,IAAP,CAAY,MAAZ,EAAmB;AAACf,MAAAA,IAAD;AAAOE,MAAAA;AAAP,KAAnB,EAAiC,MAAM,CAEtC,CAFD;AAIA,WAAO,MAAM;AACTL,MAAAA,MAAM,CAACkB,IAAP,CAAY,YAAZ;AACAlB,MAAAA,MAAM,CAACmB,GAAP;AACH,KAHD;AAIH,GA1BQ,EA0BN,CAACR,QAAD,EAAWT,QAAQ,CAACW,MAApB,CA1BM,CAAT,CARyB,CAkCQ;;AAEjChB,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,MAAM,CAACoB,EAAP,CAAU,SAAV,EAAsBb,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT,CApCyB,CA0CzB;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAO,QAAA,KAAK,EAAEF,OAAd;AACA,QAAA,QAAQ,EAAGc,CAAD,IAAOX,WAAW,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAD5B;AAEA,QAAA,UAAU,EAAEF,CAAC,IAAIA,CAAC,CAACG,GAAF,KAAU,OAAV,GAAoBC,WAAW,CAACJ,CAAD,CAA/B,GAAqC;AAFtD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAvDD;;GAAMpB,I;;KAAAA,I;AAyDN,eAAeA,IAAf","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nlet socket;\n\nconst Chat = ({location}) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    const ENDPOINT = 'localhost:5000';\n\n    useEffect(() => {\n        const {name,room} = queryString.parse(location.search);\n\n        socket = io(ENDPOINT,{\n            withCredentials: false,\n            transportOptions: {\n                polling: {\n                    extraHeaders: {\n                        \"my-custom-header\": \"abcd\"\n                    }\n                }\n            }\n\n        });\n\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join',{name, room}, () => {\n\n        });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.off();\n        }\n    }, [ENDPOINT, location.search]); //useEffect when values change for only once\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            setMessages([...messages, message]);\n        })\n    }, [messages]);\n\n    // fn for sending messages\n\n\n    return (\n        <div className =\"outerConatainer\">\n            <div className=\"conatiner\">\n                <input value={message} \n                onChange={(e) => setMessages(e.target.value)}\n                onKeyPress={e => e.key === 'Enter' ? sendMessage(e) : null}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}